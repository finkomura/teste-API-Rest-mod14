{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "start": "2023-11-04T18:08:20.530Z",
    "end": "2023-11-04T18:08:22.071Z",
    "duration": 1541,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "21a2e873-ee18-4861-af87-1a37cb03f82b",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70e9c488-4e43-4763-8f49-6f86e284845e",
          "title": "Testes de funcionalidade de produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contratpo de produtos",
              "fullTitle": "Testes de funcionalidade de produtos Deve validar contratpo de produtos",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "8eeebc7e-94e6-4eeb-9877-4047ae983171",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Testes de funcionalidade de produtos Listar produtos",
              "timedOut": null,
              "duration": 75,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'http://localhost:3000/produtos'\n}).then(response => {\n  //expect(response.body.produtos[1].nome).to.equal('Logitech MX Vertical')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "287365dd-98e9-4706-9061-071141949390",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cadastrar produto",
              "fullTitle": "Testes de funcionalidade de produtos cadastrar produto",
              "timedOut": null,
              "duration": 525,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\produtos.cy.js\\\\Testes de funcionalidade de produtos -- cadastrar produto (failed).png\"\n    ]\n  ]\n}",
              "code": "let produto = `produto Ebac ${Math.floor(Math.random() * 10000)}`;\ncy.request({\n  method: 'POST',\n  url: \"produtos\",\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    Authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/produtos\n\nThe response we received from your web server was:\n\n  > 400: Bad Request\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:3000/produtos\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImRhbHZpbmhhQHFhLmNvbS5iciIsInBhc3N3b3JkIjoidGVzdGUiLCJpYXQiOjE2OTkxMjEzMDAsImV4cCI6MTY5OTEyMTkwMH0.gshURKEbUhwCJL3EkhO7JCmFi_r3m1WajqZOuQ_oRZk\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.3.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 83\n}\nBody: {\"nome\":\"produto Ebac 535\",\"preco\":200,\"descricao\":\"produto novo\",\"quantidade\":100}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 400 - Bad Request\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"3851572c-a77e-424c-a72d-73c523e9ba49\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"53\",\n  \"date\": \"Sat, 04 Nov 2023 18:08:20 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"Já existe produto com esse nome\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/produtos\n\nThe response we received from your web server was:\n\n  > 400: Bad Request\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:3000/produtos\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImRhbHZpbmhhQHFhLmNvbS5iciIsInBhc3N3b3JkIjoidGVzdGUiLCJpYXQiOjE2OTkxMjEzMDAsImV4cCI6MTY5OTEyMTkwMH0.gshURKEbUhwCJL3EkhO7JCmFi_r3m1WajqZOuQ_oRZk\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.3.3 Chrome/114.0.5735.289 Electron/25.8.4 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 83\n}\nBody: {\"nome\":\"produto Ebac 535\",\"preco\":200,\"descricao\":\"produto novo\",\"quantidade\":100}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 400 - Bad Request\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"3851572c-a77e-424c-a72d-73c523e9ba49\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"53\",\n  \"date\": \"Sat, 04 Nov 2023 18:08:20 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"Já existe produto com esse nome\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:133260:72)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1701:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://teste-api-cypress/./cypress/e2e/produtos.cy.js:27:11)",
                "diff": null
              },
              "uuid": "3cbae969-dd58-4f91-b536-b6beac6df28c",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes de funcionalidade de produtos deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: \"produtos\",\n  body: {\n    \"nome\": \"produto EBAC 5116\",\n    \"preco\": 200,\n    \"descricao\": \"produto novo\",\n    \"quantidade\": 100\n  },\n  failOnStatusCode: false,\n  headers: {\n    Authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "b6863127-0f8c-4d0a-8bf8-749ef5093737",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fazer o cadastro com comando customizado",
              "fullTitle": "Testes de funcionalidade de produtos fazer o cadastro com comando customizado",
              "timedOut": null,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"produtinho 1123\", 300, \"produto criado para teste\", 25).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "73cac7ef-45ef-46fe-9f5e-4aa859b8d9e8",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve pegar o id de um produto cadastrado",
              "fullTitle": "Testes de funcionalidade de produtos deve pegar o id de um produto cadastrado",
              "timedOut": null,
              "duration": 85,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  // cy.log(response.body.produtos[0]._id)\n  let id = response.body.produtos[0]._id;\n  let nome = response.body.produtos[0].nome;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": nome,\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  });\n});",
              "err": {},
              "uuid": "3f64b14c-463a-41ca-b819-d0d3ce218cd5",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve editar um produto cadastrado previamente",
              "fullTitle": "Testes de funcionalidade de produtos deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'descricao do produto novo', 190).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    failOnStatusCode: false,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 280,\n      \"descricao\": \"descricao do produto novo\",\n      \"quantidade\": 190\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "d8638298-93f4-4c78-94c5-04403984633c",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve editar um produto cadastrado previamente",
              "fullTitle": "Testes de funcionalidade de produtos deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'descricao do produto novo', 190).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    failOnStatusCode: false,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "07342d9b-4372-49bc-8d61-abfcdad05e59",
              "parentUUID": "70e9c488-4e43-4763-8f49-6f86e284845e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8eeebc7e-94e6-4eeb-9877-4047ae983171",
            "287365dd-98e9-4706-9061-071141949390",
            "b6863127-0f8c-4d0a-8bf8-749ef5093737",
            "73cac7ef-45ef-46fe-9f5e-4aa859b8d9e8",
            "3f64b14c-463a-41ca-b819-d0d3ce218cd5",
            "d8638298-93f4-4c78-94c5-04403984633c",
            "07342d9b-4372-49bc-8d61-abfcdad05e59"
          ],
          "failures": [
            "3cbae969-dd58-4f91-b536-b6beac6df28c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}